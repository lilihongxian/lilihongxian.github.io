<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>消息队列的学习(二)</title>
      <link href="/2019/01/15/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/"/>
      <url>/2019/01/15/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Jan 16 2019 17:47:48 GMT+0800 (GMT+08:00) --><p>我们上节讲述了关于消息队列的概述，以及他的通讯模式分类，其实都是很抽象化的一些东西，学起来相对来说会无趣一些，这一节我们来讲述关于消息队列的优劣和应用场景。通过这些比较切合实际的东西来加强对它的理解。</p><a id="more"></a><h2 id="消息队列的优劣比较："><a href="#消息队列的优劣比较：" class="headerlink" title="消息队列的优劣比较："></a>消息队列的优劣比较：</h2><h3 id="消息队列的优势："><a href="#消息队列的优势：" class="headerlink" title="消息队列的优势："></a>消息队列的优势：</h3><ol><li>解耦合</li><li></li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> MessageQueue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列的学习(一)</title>
      <link href="/2019/01/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2019/01/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Jan 16 2019 17:47:48 GMT+0800 (GMT+08:00) --><h3 id="图片大纲"><a href="#图片大纲" class="headerlink" title="图片大纲"></a>图片大纲</h3><p><img src="https://raw.githubusercontent.com/lilihongxian/img/master/MessageQueue.png" alt="MessageQueue"></p><a id="more"></a><blockquote><p>想要系统的学习消息队列，我们首先需要对它有一个系统的认识 ，什么是消息队列？</p></blockquote><h3 id="消息队列的概述"><a href="#消息队列的概述" class="headerlink" title="消息队列的概述"></a>消息队列的概述</h3><p>消息队列技术是分布式应用间交换信息的一种技术。消息队列可驻留在内存或磁盘上,队列存储消息直到它们被应用程序读走。通过消息队列，应用程序可独立地执行–它们不需要知道彼此的位置、或在继续执行前不需要等待接收程序接收此消息。</p><p>在分布式计算环境中，为了集成分布式应用，开发者需要对异构网络环境下的分布式应用提供有效的通信手段。为了管理需要共享的信息，对应用提供公共的信息交换机制是重要的。</p><p>消息队列为构造以同步或异步方式实现的分布式应用提供了松耦合方法。消息队列的API调用被嵌入到新的或现存的应用中，通过消息发送到内存或基于磁盘的队列或从它读出而提供信息交换。消息队列可用在应用中以执行多种功能，比如要求服务、交换信息或异步处理等。</p><p>中间件是一种独立的系统软件或服务程序，分布式应用系统借助这种软件在不同的技术之间共享资源，管理计算资源和网络通讯。它在计算机系统中是一个关键软件，它能实现应用的互连和互操作性，能保证系统的安全、可靠、高效的运行。中间件位于用户应用和操作系统及网络软件之间，它为应用提供了公用的通信手段，并且独立于网络和操作系统。中间件为开发者提供了公用于所有环境的应用程序接口，当应用程序中嵌入其函数调用，它便可利用其运行的特定操作系统和网络环境的功能，为应用执行通信功能。</p><p>如果没有消息中间件完成信息交换，应用开发者为了传输数据，必须要学会如何用网络和操作系统软件的功能，编写相应的应用程序来发送和接收信息，且交换信息没有标准方法，每个应用必须进行特定的编程从而和多平台、不同环境下的一个或多个应用通信。例如，为了实现网络上不同主机系统间的通信，将要求具备在网络上如何交换信息的知识（比如用TCP/IP的socket程序设计）；为了实现同一主机内不同进程之间的通讯，将要求具备操作系统的消息队列或命名管道(Pipes)等知识。</p><p>上面的叙述也是直接说明了消息队列的一个优势，即解耦。他的平台无关性或者说消除不同系统之间的差异性很多时候省去了我们一些学习成本，使得我们再开发应用的时候传递消息不用再考虑特定的系统用相应的传输方式传输；其他优点类似削峰控流，异步等会再下一部分进行比较详细的叙述。</p><blockquote><p>现在我们再来介绍一下他的通讯模式分类</p></blockquote><h3 id="通讯模式分类"><a href="#通讯模式分类" class="headerlink" title="通讯模式分类"></a>通讯模式分类</h3><p>首先先来解释一下为什么要将通讯模式分类，我们知道现实世界的应用场景的非常复杂的，所以在应用消息队列的时候我们不可能说一种模式就可以应对所有的应用场景，那么我们在消息队列中就分出几种通讯模式来应对不同的场景，根据实际情况选择合适的模式，这样有利于我们减少资源的消耗，而且可以更好地满足需求。</p><ol><li>点对点通讯：点对点方式是最为传统和常见的通讯方式，它支持一对一、一对多、多对多、多对一等多种配置方式，支持树状、网状等多种拓扑结构。</li><li>多点广播：MQ适用于不同类型的应用。其中重要的，也是正在发展中的是”多点广播”应用，即能够将消息发送到多个目标站点(Destination List)。可以使用一条MQ指令将单一消息发送到多个目标站点，并确保为每一站点可靠地提供信息。MQ不仅提供了多点广播的功能，而且还拥有智能消息分发功能，在将一条消息发送到同一系统上的多个用户时，MQ将消息的一个复制版本和该系统上接收者的名单发送到目标MQ系统。目标MQ系统在本地复制这些消息，并将它们发送到名单上的队列，从而尽可能减少网络的传输量。</li><li>发布/订阅(Publish/Subscribe)模式：发布/订阅功能使消息的分发可以突破目的队列地理指向的限制，使消息按照特定的主题甚至内容进行分发，用户或应用程序可以根据主题或内容接收到所需要的消息。发布/订阅功能使得发送者和接收者之间的耦合关系变得更为松散，发送者不必关心接收者的目的地址，而接收者也不必关心消息的发送地址，而只是根据消息的主题进行消息的收发。在MQ家族产品中，MQ Event Broker是专门用于使用发布/订阅技术进行数据通讯的产品，它支持基于队列和直接基于TCP/IP两种方式的发布和订阅。</li><li>群集(Cluster)：为了简化点对点通讯模式中的系统配置，MQ提供Cluster(群集)的解决方案。群集类似于一个域(Domain)，群集内部的队列管理器之间通讯时，不需要两两之间建立消息通道，而是采用群集(Cluster)通道与其它成员通讯，从而大大简化了系统配置。此外，群集中的队列管理器之间能够自动进行负载均衡，当某一队列管理器出现故障时，其它队列管理器可以接管它的工作，从而大大提高系统的高可靠性。</li></ol><blockquote><p>现在我拿点对点模式和发布/订阅模式做一个解释和对比：</p></blockquote><h4 id="点对点模式：-不可重复消费"><a href="#点对点模式：-不可重复消费" class="headerlink" title="点对点模式：(不可重复消费)"></a>点对点模式：(不可重复消费)</h4><p>点对点模式下包括三个角色：</p><ul><li>消息队列</li><li>发送者 (生产者)</li><li>接收者（消费者）</li></ul><p><img src="https://blog-10039692.file.myqcloud.com/1506330130593_2564_1506330132919.png" alt="p2p"></p><p>消息发送者生产消息发送到queue中，然后消息接收者从queue中取出并且消费消息。消息被消费以后，queue中不再有存储，所以消息接收者不可能消费到已经被消费的消息。<strong>queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</strong></p><p>点对点模式特点：</p><ul><li>每个消息只有一个接收者（Consumer）(即一旦被消费，消息就不再在消息队列中)；</li><li>发送者和接收者间没有依赖性，发送者发送消息之后，不管有没有接收者在运行，都不会影响到发送者下次发送消息；</li><li>接收者在成功接收消息之后需向队列应答成功，以便消息队列删除当前接收的消息；</li></ul><h4 id="发布-订阅模式：-可以重复消费"><a href="#发布-订阅模式：-可以重复消费" class="headerlink" title="发布/订阅模式：(可以重复消费)"></a>发布/订阅模式：(可以重复消费)</h4><p>发布/订阅模式下包括三个角色：</p><ul><li>角色主题（Topic）</li><li>发布者(Publisher)</li><li>订阅者(Subscriber)</li></ul><p><img src="https://blog-10039692.file.myqcloud.com/1506330158945_9538_1506330161280.png" alt=""></p><p>发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。同时有多个消息消费者（订阅）消费该消息。<strong>和点对点方式不同，发布到topic的消息会被所有订阅者消费。</strong></p><p>发布/订阅模式特点：</p><ul><li>每个消息可以有多个订阅者；</li><li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li><li>为了消费消息，订阅者需要提前订阅该角色主题，并保持在线运行；</li></ul><p>支持订阅组的发布订阅模式：<br>发布订阅模式下，当发布者消息量很大时，显然单个订阅者的处理能力是不足的。实际上现实场景中是多个订阅者节点组成一个订阅组负载均衡消费topic消息即分组订阅，这样订阅者很容易实现消费能力线性扩展。<strong>可以看成是一个topic下有多个Queue，每个Queue是点对点的方式，Queue之间是发布订阅方式。</strong></p><p><img src="https://raw.githubusercontent.com/lilihongxian/img/master/20151201162825775.jpg" alt="发布/订阅"></p><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><h5 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h5><p>生产者发送一条消息到queue，一个queue可以有很多消费者，但是一个消息只能被一个消费者接受，当没有消费者可用时，这个消息会被保存直到有 一个可用的消费者，所以Queue实现了一个可靠的负载均衡。</p><h5 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h5><p>发布者发送到topic的消息，只有订阅了topic的订阅者才会收到消息。topic实现了发布和订阅，当你发布一个消息，所有订阅这个topic的服务都能得到这个消息，所以从1到N个订阅者都能得到这个消息的拷贝。</p><p>这一部分主要是讲述了消息队列的概念和其通讯模式的分类，在下一部分会讲述其作用和应用场景，用兴趣的同学可以关注一下！</p><font face="微软雅黑" size="3" color="#FF0000">本文主要用于个人学习和总结，侵权请联系删除</font><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> MessageQueue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
